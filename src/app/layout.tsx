import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { Toaster } from "sonner";
import ClientProvider from "./client";
import { ClerkProvider } from "@clerk/nextjs";
import { currentUser } from "@clerk/nextjs/server";
import { fetchRedis } from "@/lib/hepper/redis";
import { getFriendsByUserId } from "@/lib/hepper/get-friends";
import { Message } from "@/types/message";
import GlobalNotificationProvider from "@/components/global-notification-provider";
import { NextSSRPlugin } from "@uploadthing/react/next-ssr-plugin";
import { extractRouterConfig } from "uploadthing/server";
import { ourFileRouter } from "@/app/api/uploadthing/core";
import { getServersByUserId } from "@/lib/hepper/get-servers";
import { ThemeProvider } from "@/components/theme-provider";
import { GroupMessage } from "@/types/group-message";
import { ServerWithLatestMessage } from "@/types/servers";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Thomas",
  description: "Generated by Cmanh",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const user = await currentUser();

  if (!user) {
    return (
      <div>
        <p>Please sign in</p>
      </div>
    );
  }
  const unseenRequests = (await fetchRedis(
    "smembers",
    `user:${user.id}:incoming_friend_requests`
  )) as string[];

  const initialFriends = await getFriendsByUserId(user.id);

  const friendsWithLastMessage = await Promise.all(
    initialFriends.map(async (friend) => {
      const sortedIds = [user.id, friend.id].sort();
      const [lastMessageRaw] = await fetchRedis(
        "zrange",
        `chat:${sortedIds[0]}--${sortedIds[1]}:messages`,
        -1,
        -1
      );
      if (!lastMessageRaw) {
        return {
          ...friend,
          lastMessage: {
            id: "",
            text: "You are now friends! Let's chat together.",
            senderId: "",
            timestamp: 0,
          } as Message,
        };
      } else {
        const lastMessage = JSON.parse(lastMessageRaw) as Message;
        return {
          ...friend,
          lastMessage,
        };
      }
    })
  );
  const servers = await getServersByUserId(user.id);

  // Fetch last messages for servers
  const serversWithLastMessage: ServerWithLatestMessage[] = await Promise.all(
    servers.map(async (server) => {
      const [lastMessageRaw] = (await fetchRedis(
        "zrange",
        `servers:${server.id}:messages`,
        -1,
        -1
      )) as string[];
      console.log(
        "ðŸ’¬ Last message raw for server",
        server.id,
        ":",
        lastMessageRaw
      );
      if (!lastMessageRaw) {
        return {
          ...server,
          latestMessage: {
            id: "",
            text: "Welcome to the server! Start chatting.",
            timestamp: 0,
            sender: {
              id: "",
              email: "",
              firstName: "",
              lastName: "",
              imageUrl: "",
              username: "",
              createdAt: new Date().toISOString(),
            },
            isNotification: false,
          } as GroupMessage,
        };
      } else {
        const lastMessage = JSON.parse(lastMessageRaw) as GroupMessage;
        return {
          ...server,
          latestMessage: lastMessage,
        };
      }
    })
  );
  console.log("ðŸ’¬ Servers with latest messages:", serversWithLastMessage);

  return (
    <ClerkProvider dynamic>
      <html lang="en" suppressHydrationWarning>
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >
          <NextSSRPlugin routerConfig={extractRouterConfig(ourFileRouter)} />
          <ThemeProvider
            attribute="class"
            defaultTheme="system"
            enableSystem
            disableTransitionOnChange
          >
            <ClientProvider
              unseenRequestCount={unseenRequests.length}
              initialFriends={friendsWithLastMessage}
              userId={user.id}
              servers={serversWithLastMessage}
            >
              <GlobalNotificationProvider>
                {children}
              </GlobalNotificationProvider>
            </ClientProvider>
            <Toaster richColors position="top-center" closeButton />
          </ThemeProvider>
        </body>
      </html>
    </ClerkProvider>
  );
}
