import { fetchRedis } from "@/lib/hepper/redis";
import React, { Suspense } from "react";
import { Metadata } from "next";
import { Servers } from "@/types/servers";
import Loading from "@/components/chat/loading";
import GroupChatInterface from "./group-chat-interface";
import { GroupMessage } from "@/types/group-message";
import { groupMessageArrayValidator } from "@/lib/validation/group-message";

interface PageProps {
  params: Promise<{
    serverId: string;
  }>;
}

export async function generateMetadata({
  params,
}: PageProps): Promise<Metadata> {
  const { serverId } = await params;

  try {
    const data = await fetchRedis("get", `servers:${serverId}`);

    if (!data) {
      return {
        title: "Server Not Found",
        description: "The requested server does not exist",
      };
    }

    const serverData = JSON.parse(data);

    return {
      title: `Chat room ${serverData.serverName}`,
      description: "Generated by Cmanh",
    };
  } catch {
    return {
      title: "Server Error",
      description: "Failed to load server information",
    };
  }
}
async function getChatMessages(serverId: string) {
  try {
    const result = (await fetchRedis(
      "zrevrange",
      `servers:${serverId}:messages`,
      0,
      19
    )) as string[];
    const dbMessages = result.map(
      (message) => JSON.parse(message) as GroupMessage
    );

    const messages = groupMessageArrayValidator.parse(dbMessages);
    return messages.reverse();
  } catch {
    return [];
  }
}
const Page = async ({ params }: PageProps) => {
  const { serverId } = await params;

  const data = await fetchRedis("get", `servers:${serverId}`);

  if (!data) {
    return (
      <div>
        <h1>Server Not Found</h1>
        <p>The server with ID {serverId} does not exist.</p>
      </div>
    );
  }

  const serverData = JSON.parse(data) as Servers;
  const initialMessages = (await getChatMessages(serverId)) as GroupMessage[];

  return (
    <Suspense fallback={<Loading />}>
      <div className="flex h-full bg-gray-100 overflow-hidden p-4 gap-4 min-h-0">
        <GroupChatInterface
          servers={serverData}
          initialMessages={initialMessages}
          serverId={serverId}
        />
      </div>
    </Suspense>
  );
};

export default Page;
